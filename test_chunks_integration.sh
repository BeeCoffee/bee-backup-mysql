#!/bin/bash

# =============================================================================
# SCRIPT DE TESTE - INTEGRA√á√ÉO DO SISTEMA DE CHUNKS
# =============================================================================
# Este script testa a integra√ß√£o do sistema de backup por chunks no script principal

set -euo pipefail

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

echo -e "${BLUE}üß™ TESTE DE INTEGRA√á√ÉO - SISTEMA DE CHUNKS${NC}"
echo -e "${BLUE}=================================================${NC}"
echo

# Diret√≥rio base do projeto
BASE_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

echo -e "${YELLOW}üìÅ Verificando estrutura dos arquivos...${NC}"

# 1. Verificar se arquivos existem
files_to_check=(
    "$BASE_DIR/scripts/backup.sh"
    "$BASE_DIR/.env.example"
    "$BASE_DIR/backup_chunks_helper.sh"
)

for file in "${files_to_check[@]}"; do
    if [[ -f "$file" ]]; then
        echo -e "   ‚úÖ $file"
    else
        echo -e "   ‚ùå $file ${RED}(ARQUIVO N√ÉO ENCONTRADO)${NC}"
        exit 1
    fi
done

echo

# 2. Verificar se fun√ß√µes foram adicionadas no backup.sh
echo -e "${YELLOW}üîç Verificando fun√ß√µes no backup.sh...${NC}"

functions_to_check=(
    "detect_large_tables"
    "backup_table_chunks"
)

for func in "${functions_to_check[@]}"; do
    if grep -q "^$func()" "$BASE_DIR/scripts/backup.sh"; then
        echo -e "   ‚úÖ Fun√ß√£o $func encontrada"
    else
        echo -e "   ‚ùå Fun√ß√£o $func ${RED}(N√ÉO ENCONTRADA)${NC}"
        exit 1
    fi
done

echo

# 3. Verificar se as configura√ß√µes est√£o no .env.example
echo -e "${YELLOW}‚öôÔ∏è  Verificando configura√ß√µes no .env.example...${NC}"

config_vars=(
    "CHUNK_SIZE_THRESHOLD_MB"
    "CHUNK_SIZE"
    "ENABLE_AUTO_CHUNKING"
    "CHUNK_TIMEOUT"
    "CHUNK_MAX_RETRIES"
)

for var in "${config_vars[@]}"; do
    if grep -q "^$var=" "$BASE_DIR/.env.example" || grep -q "^# $var=" "$BASE_DIR/.env.example"; then
        echo -e "   ‚úÖ Configura√ß√£o $var encontrada"
    else
        echo -e "   ‚ùå Configura√ß√£o $var ${RED}(N√ÉO ENCONTRADA)${NC}"
        exit 1
    fi
done

echo

# 4. Verificar integra√ß√£o na fun√ß√£o backup_database
echo -e "${YELLOW}üîó Verificando integra√ß√£o na fun√ß√£o backup_database...${NC}"

if grep -q "detect_large_tables" "$BASE_DIR/scripts/backup.sh"; then
    echo -e "   ‚úÖ Chamada para detect_large_tables encontrada"
else
    echo -e "   ‚ùå Chamada para detect_large_tables ${RED}(N√ÉO ENCONTRADA)${NC}"
    exit 1
fi

if grep -q "backup_table_chunks" "$BASE_DIR/scripts/backup.sh"; then
    echo -e "   ‚úÖ Chamada para backup_table_chunks encontrada"
else
    echo -e "   ‚ùå Chamada para backup_table_chunks ${RED}(N√ÉO ENCONTRADA)${NC}"
    exit 1
fi

if grep -q "MODO H√çBRIDO" "$BASE_DIR/scripts/backup.sh"; then
    echo -e "   ‚úÖ L√≥gica de backup h√≠brido encontrada"
else
    echo -e "   ‚ùå L√≥gica de backup h√≠brido ${RED}(N√ÉO ENCONTRADA)${NC}"
    exit 1
fi

echo

# 5. Teste de sintaxe do bash
echo -e "${YELLOW}‚úÖ Testando sintaxe dos scripts...${NC}"

if bash -n "$BASE_DIR/scripts/backup.sh"; then
    echo -e "   ‚úÖ backup.sh - Sintaxe v√°lida"
else
    echo -e "   ‚ùå backup.sh ${RED}(ERRO DE SINTAXE)${NC}"
    exit 1
fi

if bash -n "$BASE_DIR/backup_chunks_helper.sh"; then
    echo -e "   ‚úÖ backup_chunks_helper.sh - Sintaxe v√°lida"
else
    echo -e "   ‚ùå backup_chunks_helper.sh ${RED}(ERRO DE SINTAXE)${NC}"
    exit 1
fi

echo

# 6. Verificar se vari√°veis est√£o sendo usadas corretamente
echo -e "${YELLOW}üìä Verificando uso das vari√°veis de configura√ß√£o...${NC}"

if grep -q 'CHUNK_SIZE_THRESHOLD_MB' "$BASE_DIR/scripts/backup.sh"; then
    echo -e "   ‚úÖ CHUNK_SIZE_THRESHOLD_MB sendo utilizada"
else
    echo -e "   ‚ö†Ô∏è  CHUNK_SIZE_THRESHOLD_MB n√£o encontrada no script"
fi

if grep -q 'CHUNK_SIZE' "$BASE_DIR/scripts/backup.sh"; then
    echo -e "   ‚úÖ CHUNK_SIZE sendo utilizada"
else
    echo -e "   ‚ö†Ô∏è  CHUNK_SIZE n√£o encontrada no script"
fi

echo

# 7. Relat√≥rio final
echo -e "${GREEN}üéâ TESTE DE INTEGRA√á√ÉO CONCLU√çDO${NC}"
echo -e "${GREEN}===================================${NC}"
echo
echo -e "${GREEN}‚úÖ SUCESSO:${NC} Sistema de backup por chunks integrado com sucesso!"
echo
echo -e "${BLUE}üìã RESUMO DA INTEGRA√á√ÉO:${NC}"
echo -e "   üîß Fun√ß√µes de chunks adicionadas ao backup.sh"
echo -e "   ‚öôÔ∏è  Configura√ß√µes adicionadas ao .env.example"  
echo -e "   üîó L√≥gica de backup h√≠brido implementada"
echo -e "   ‚úÖ Todos os testes de sintaxe passaram"
echo
echo -e "${PURPLE}üöÄ PR√ìXIMOS PASSOS:${NC}"
echo -e "   1. Configure suas vari√°veis no arquivo .env"
echo -e "   2. Teste o backup com: ${BLUE}./backup_chunks_helper.sh test${NC}"
echo -e "   3. Execute um backup real para validar"
echo
echo -e "${YELLOW}üí° DICA:${NC} Para bancos com tabelas >1GB, o sistema automaticamente"
echo -e "   detectar√° e usar√° backup por chunks, evitando timeouts!"
echo

exit 0
